#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Aug  5 10:10:41 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
#			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout 1
spawn $env(SHELL)
match_max 100000
expect "EKit_L"
send -- "sudo ./DMCT\r"
sleep .1
expect -exact "( 1) System Info."

send -- "1\r"
sleep .1
expect -exact "( 1) Firmware Info."

send -- "1\r"
sleep .1
expect "Firmware version:"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"

send -- "q\r"
sleep .1
expect -exact "( 2) DDM Config Info."

send -- "2\r"
sleep .1
expect -exact "( 2) User String Config Setup."

send -- "3\r"
sleep .1
expect "DDM Config:"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"

send -- "q\r"
sleep .1
expect -exact "( 3) Health Monitoring."

send -- "3\r"
sleep .1
expect -exact "( 1) System Health."

send -- "1\r"
sleep .1
expect -exact "Temperature:"

send -- "q\r"
sleep .1
expect -exact "( 4) Hardware Monitor."

send -- "4\r"
sleep .1
expect "Hardware Monitoring:"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"


send -- "q\r"
sleep .1
expect -exact "( 4) POE Config Info & Monitoring.
"
send -- "4\r"
sleep .1
expect -exact "( 3) PoE Status."

send -- "3\r"
sleep .1
expect "PoE Status:"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"

send -- "q\r"
sleep .1
expect -exact "( 5) miniPCIe Config Info."

send -- "5\r"
sleep .1
expect -exact "( 3) miniPCIe Status."

send -- "3\r"
sleep .1
expect "miniPCIe Status:"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"

send -- "q\r"
sleep .1
expect -exact "( 6) COM Config Info."

send -- "6\r"
sleep .1
expect -exact "( 1) COM Config Info."

send -- "1\r"
sleep .1
expect "COM Config:"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"

send -- "q\r"
sleep .1
expect -exact "( 7) WDT Config Info & Monitoring."

send -- "7\r"
sleep .1
expect -exact "( 3) Runtime WDT Config Info."

send -- "3\r"
sleep .1
expect "Runtime WDT Config:"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"

send -- "q\r"
sleep .1
expect -exact "( 8) Power Config Info."

send -- "8\r"
sleep .1
expect -exact "( 1) Power Config Info."

send -- "1\r"
sleep .1
expect "Power Config:"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"

send -- "q\r"
sleep .1
expect -exact "( 9) USB Config Info."

send -- "9\r"
sleep .1
expect -exact "( 1) USB Config Info."

send -- "1\r"
sleep .1
expect "USB Config:"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"

send -- "q\r"
sleep .1
expect -exact "(10) Fan Config Info & Monitoring."

send -- "10\r"
sleep .1
expect -exact "( 1) Fan Config Info."

send -- "1\r"
sleep .1
expect "1Fan Config:"

send -- "q\r"
sleep .1
expect -exact "( 3) Fan Status."

send -- "3\r"
sleep .1
expect "Fan Status:"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"

send -- "q\r"
sleep .1
expect -exact "(11) IO (DIO/IDIO) Status & Config Info."

send -- "11\r"
sleep .1
expect -exact "( 8) GPIO Pins Status."

send -- "8\r"
sleep .1
expect "GPIO  HEX"

send -- "q\r"
sleep .1
expect -exact "(Q)uit the procedure"

send -- "q\r"
sleep .1
expect -exact "(Exit) the program"

send -- "exit\r"
sleep .1

